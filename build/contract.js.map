{"version":3,"file":"contract.js","sources":["../node_modules/near-sdk-js/src/near-bindgen.js","../node_modules/near-sdk-js/src/near-contract.js","../node_modules/near-sdk-js/src/api.js","../src/index.js"],"sourcesContent":["export function call (target, name, descriptor) {\n    return descriptor\n}\n\nexport function view (target, name, descriptor) {\n    return descriptor\n}\n\nexport function NearBindgen (Class) {\n    let OriginalClass = Class\n    let NewClass = function() {\n        let args = OriginalClass.deserializeArgs()\n        let ret = new OriginalClass(...args)\n        ret.serialize()\n        return ret\n    }\n    NewClass.prototype = OriginalClass.prototype\n    NewClass._get = function() {\n        let ret = Object.create(NewClass.prototype)\n        return ret\n    }\n\n    return NewClass\n}\n","export class NearContract {\n    deserialize() {\n        let hasRead = env.jsvm_storage_read('STATE', 0)\n        if (hasRead != 0) {\n            let state = env.read_register(0)\n            Object.assign(this, JSON.parse(state))\n        } else\n            throw new Error('Contract state is empty')\n    }\n\n    serialize() {\n        env.jsvm_storage_write('STATE', JSON.stringify(this), 0)\n    }\n\n    static deserializeArgs() {\n        env.jsvm_args(0)\n        let args = env.read_register(0)\n        return JSON.parse(args || '[]')\n    }\n\n    static serializeReturn(ret) {\n        return JSON.stringify(ret)\n    }\n}\n","const U64_MAX = 2n**64n - 1n\nconst EVICTED_REGISTER = U64_MAX - 1n\n\nexport function signerAccountId() {\n    env.signer_account_id(0)\n    return env.read_register(0)\n}\n\nexport function signerAccountPk() {\n    env.signer_account_pk(0)\n    return env.read_register(0)\n}\n\nexport function predecessorAccountId() {\n    env.predecessor_account_id(0)\n    return env.read_register(0)\n}\n\nexport function randomSeed() {\n    env.random_seed(0)\n    return env.read_register(0)\n}\n\nexport function sha256(value) {\n    env.sha256(value, 0)\n    return env.read_register(0)\n}\n\nexport function keccak256(value) {\n    env.keccak256(value, 0)\n    return env.read_register(0)\n}\n\nexport function keccak512(value) {\n    env.keccak512(value, 0)\n    return env.read_register(0)\n}\n\nexport function ripemd160(value) {\n    env.ripemd160(value, 0)\n    return env.read_register(0)\n}\n\nexport function ecrecover(hash, sign, v, malleabilityFlag) {\n    let ret = env.ecrecover(hash, sign, v, malleabilityFlag, 0)\n    if (ret === 0n) {\n        return null\n    }\n    return env.read_register(0)\n}\n\n// TODO: env.promise_result returns need additioonal handling\n\nexport function storageRead(key) {\n    let ret = env.storage_read(key, 0)\n    if (ret === 1n) {\n        return env.read_register(0)\n    } else {\n        return null\n    }\n}\n\nexport function altBn128G1Multiexp(value) {\n    env.alt_bn128_g1_multiexp(value, 0)\n    return env.read_register(0)\n}\n\nexport function altBn128G1Sum(value) {\n    env.alt_bn128_g1_sum(value, 0)\n    return env.read_register(0)\n}\n\nexport function jsvmAccountId() {\n    env.jsvm_account_id(0)\n    return env.read_register(0)\n}\n\nexport function jsvmJsContractName() {\n    env.jsvm_js_contract_name(0)\n    return env.read_register(0)\n}\n\nexport function jsvmMethodName() {\n    env.jsvm_method_name(0)\n    return env.read_register(0)\n}\n\nexport function jsvmArgs() {\n    env.jsvm_args(0)\n    return env.read_register(0)\n}\n\nexport function jsvmStorageWrite(key, value) {\n    let exist = env.jsvm_storage_write(key, value, EVICTED_REGISTER)\n    if (exist === 1n) {\n        return true\n    }\n    return false\n}\n\nexport function jsvmStorageRead(key) {\n    let exist = env.jsvm_storage_read(key, 0)\n    if (exist === 1n) {\n        return env.read_register(0)\n    }\n    return null\n}\n\nexport function jsvmStorageRemove(key) {\n    let exist = env.jsvm_storage_remove(key, EVICTED_REGISTER)\n    if (exist === 1n) {\n        return true\n    }\n    return false\n}\n\nexport function jsvmStorageHasKey(key) {\n    let exist = env.jsvm_storage_has_key(key)\n    if (exist === 1n) {\n        return true\n    }\n    return false\n}\n\nexport function jsvmCall(contractName, method, args) {\n    env.jsvm_call(contractName, method, JSON.stringify(args), 0)\n    return JSON.parse(env.read_register(0) || 'null')\n}\n\nexport function storageGetEvicted() {\n    return env.read_register(EVICTED_REGISTER)\n}","import {NearContract, NearBindgen, call, view, near} from 'near-sdk-js'\n\n//function for asserting a statement\nfunction assert(b, str)\n{\n    if (b) {\n        return;\n    } else {\n        throw Error(\"assertion failed: \" + str);\n    }\n}\n\n@NearBindgen\nclass NimContract extends NearContract {\n    constructor(playerOne, playerTwo) {\n        //execute the NEAR Contract's constructor\n        super()\n        //set default values for the board state of the game. \n        this.boardState = {\n            \"row1\": 1,\n            \"row2\": 2,\n            \"row3\": 3,\n            \"row4\": 4,\n            \"row5\": 5\n        }\n        //keep track of which players are playing the game\n        this.playerOne = playerOne\n        this.playerTwo = playerTwo\n\n        //keep track of whose turn it is currently. This defaults to P1 starting.\n        this.currentTurn = 1;\n\n        //keep track of whether or not a game is active or not\n        this.isGameActive = true;\n    }\n\n    /*\n        Function to make a move. Pass in a row and a number of sticks to remove.\n        predecessor must be the current player.\n    */\n    @call\n    play(row, number) {\n        //perform necessary assertions before moving on with the core logic\n        assert(this.isGameActive == true, \"game must be active in order to play.\")\n        assert(number > 0, \"must pass in a valid number of sticks to remove.\")\n        assert(row in this.boardState, \"must pass in a valid row.\")\n        assert(this.boardState[row] >= number, \"cannot remove more sticks than what is available in the row.\")\n\n        //get the current player \n        let currentPlayer = this.currentTurn == 1 ? this.playerOne : this.playerTwo\n        //get the predecessor and make sure they are the current player.\n        let pred = near.predecessorAccountId();\n        assert(pred == currentPlayer, \"only the active player whose turn it is can make a move\")\n\n        //decrement the passed in number of sticks from the passed in row.\n        this.boardState[row] -= number\n        env.log(`game state at row after decrementing: ${this.boardState[row]}`)\n\n        //keep track of the total amount of sticks left in the game after the decrement.\n        let totalLeft = 0;\n        for (const row in this.boardState) {\n            env.log(`${row}: ${this.boardState[row]}`);\n            totalLeft += this.boardState[row];\n        }\n\n        //if there is only 1 stick left after making the move, the current player has won the game.\n        if(totalLeft == 1) {\n            env.log(`${this.currentTurn == 1 ? this.playerOne : this.playerTwo} has won the game!`);\n            this.isGameActive = false;\n            return\n        } else {\n            env.log(`There are ${totalLeft} left`);\n        }\n\n        this.currentTurn = this.currentTurn % 2 + 1\n        env.log(`current turn after switching ${this.currentTurn}`)\n    }\n\n    /*\n        start a new game. this can only be called if there is no game active.\n    */\n    @call\n    newGame(playerOne, playerTwo) {\n        assert(this.isGameActive == false, \"cannot start a new game when one is currently active\")\n\n        //set default values for the board state of the game. \n        this.boardState = {\n            \"row1\": 1,\n            \"row2\": 2,\n            \"row3\": 3,\n            \"row4\": 4,\n            \"row5\": 5\n        }\n        //keep track of which players are playing the game\n        this.playerOne = playerOne\n        this.playerTwo = playerTwo\n\n        //keep track of whose turn it is currently. This defaults to P1 starting.\n        this.currentTurn = 1;\n\n        //keep track of whether or not a game is active or not\n        this.isGameActive = true;\n    }\n\n    /*\n        get the current state of the smart contract. This includes:\n        full board state, player 1, 2, current turn, whether the game is active or not.\n    */\n    @view\n    getState() {\n        env.log(\"Get state called!\")\n        for (const row in this.boardState) {\n            env.log(`${row}: ${this.boardState[row]}`);\n        }\n        env.log(`player one: ${this.playerOne}`);\n        env.log(`player two: ${this.playerTwo}`);\n        env.log(`current turn: ${this.currentTurn}`);\n        env.log(`game active: ${this.isGameActive}`);\n\n        return this.boardState\n    }\n}"],"names":["call","target","name","descriptor","view","NearBindgen","Class","OriginalClass","NewClass","args","deserializeArgs","ret","serialize","prototype","_get","Object","create","NearContract","deserialize","hasRead","env","jsvm_storage_read","state","read_register","assign","JSON","parse","Error","jsvm_storage_write","stringify","jsvm_args","serializeReturn","predecessorAccountId","predecessor_account_id","assert","b","str","NimContract","constructor","playerOne","playerTwo","boardState","currentTurn","isGameActive","play","row","number","currentPlayer","pred","near","log","totalLeft","newGame","getState"],"mappings":"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"}